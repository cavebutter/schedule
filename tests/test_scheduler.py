
# Generated by CodiumAI
from src.scheduler import groups, eligible_game_days, create_games, Game
import pytest

class TestGroups:

    #  Tests that the function can create 2 equal sized groups from a list of even length
    def test_even_length_list(self):
        # Arrange
        teams = ['Team1', 'Team2', 'Team3', 'Team4']
    
        # Act
        result = groups(teams)
    
        # Assert
        assert len(result['group1']) == len(result['group2'])
        assert len(result['group1']) == 2
        assert len(result['group2']) == 2

    #  Tests that the function can create 2 equal sized groups from a list of odd length
    def test_odd_length_list(self):
        # Arrange
        teams = ['Team1', 'Team2', 'Team3']
    
        # Act
        result = groups(teams)
    
        # Assert
        assert len(result['group1']) == len(result['group2'])
        assert len(result['group1']) == 2
        assert len(result['group2']) == 2

    #  Tests that the function can handle an empty list input
    def test_empty_list(self):
        # Arrange
        teams = []
    
        # Act
        result = groups(teams)
    
        # Assert
        assert len(result['group1']) == len(result['group2'])
        assert len(result['group1']) == 0
        assert len(result['group2']) == 0


# Generated by CodiumAI

import pytest


class TestEligibleGameDays:

    #  Tests that the function returns the correct list of game days when the tournament start and end dates are exactly one week apart and the game_days list contains all days of the week.
    def test_tournament_one_week_all_days(self):
        # Arrange
        tournament_start = "2022-01-01"
        tournament_end = "2022-01-07"
        game_days = [0, 1, 2, 3, 4, 5, 6]

        # Act
        result = eligible_game_days(tournament_start, tournament_end, game_days)

        # Assert
        assert result == ["Sat Jan 01, 2022", "Sun Jan 02, 2022", "Mon Jan 03, 2022", "Tue Jan 04, 2022",
                          "Wed Jan 05, 2022", "Thu Jan 06, 2022", "Fri Jan 07, 2022"]

    def test_tournament_one_week_one_day(self):
        # Arrange
        tournament_start = "2022-01-01"
        tournament_end = "2022-01-07"
        game_days = [0]

        # Act
        result = eligible_game_days(tournament_start, tournament_end, game_days)

        # Assert
        assert result == ["Mon Jan 03, 2022"]

    def test_tournament_one_week_multiple_days(self):
        # Arrange
        tournament_start = "2023-01-01"
        tournament_end = "2023-01-07"
        game_days = [1, 3, 5]

        # Act
        result = eligible_game_days(tournament_start, tournament_end, game_days)

        # Assert
        assert result == ['Tue Jan 03, 2023', 'Thu Jan 05, 2023', 'Sat Jan 07, 2023']

    #  Tests that the function returns the correct list of game days when the tournament start and end dates are more than one week apart and the game_days list contains all days of the week.
    def test_tournament_more_than_one_week_all_days(self):
        # Arrange
        tournament_start = "2022-01-01"
        tournament_end = "2022-01-14"
        game_days = [0, 1, 2, 3, 4, 5, 6]

        # Act
        result = eligible_game_days(tournament_start, tournament_end, game_days)

        # Assert
        assert result == ["Sat Jan 01, 2022", "Sun Jan 02, 2022", "Mon Jan 03, 2022", "Tue Jan 04, 2022",
                          "Wed Jan 05, 2022", "Thu Jan 06, 2022", "Fri Jan 07, 2022", "Sat Jan 08, 2022",
                          "Sun Jan 09, 2022", "Mon Jan 10, 2022", "Tue Jan 11, 2022", "Wed Jan 12, 2022",
                          "Thu Jan 13, 2022", "Fri Jan 14, 2022"]

    #  Tests that the function returns the correct list of game days when the tournament start and end dates are more than one week apart and the game_days list contains only one day of the week.
    def test_tournament_more_than_one_week_one_day(self):
        # Arrange
        tournament_start = "2023-01-01"
        tournament_end = "2023-01-14"
        game_days = [0]

        # Act
        result = eligible_game_days(tournament_start, tournament_end, game_days)

        # Assert
        assert result == ['Mon Jan 02, 2023', 'Mon Jan 09, 2023']


# Generated by CodiumAI

import pytest


class TestCreateGames:

    #  Tests that the function returns a list of Game objects when valid parameters are passed.
    def test_valid_parameters_returns_list_of_game_objects(self):
        # Arrange
        start_date = "2022-01-01"
        end_date = "2022-01-07"
        gamedays = [0, 1, 2, 3, 4, 5, 6]
        fields = ["Field A", "Field B"]
        time_slots = ["Morning", "Afternoon", "Evening"]

        # Act
        result = create_games(start_date, end_date, gamedays, fields, time_slots)

        # Assert
        assert isinstance(result, list)
        assert all(isinstance(game, Game) for game in result)

    #  Tests that the function returns a list of eligible game days.
    def test_eligible_game_days_returns_empty_list(self):
        # Arrange
        start_date = "2022-01-08"
        end_date = "2022-01-11"
        gamedays = [3]
        fields = ["Field A", "Field B"]
        time_slots = ["Morning", "Afternoon", "Evening"]

        # Act
        result = create_games(start_date, end_date, gamedays, fields, time_slots)

        # Assert
        assert isinstance(result, list)
        assert len(result) == 0

    #  Tests that the function returns a list of Game objects when only one eligible game day is found.
    def test_one_eligible_game_day_returns_list_of_game_objects(self):
        # Arrange
        start_date = "2022-01-01"
        end_date = "2022-01-01"
        gamedays = [0, 1, 2, 3, 4, 5, 6]
        fields = ["Field A", "Field B"]
        time_slots = ["Morning", "Afternoon", "Evening"]

        # Act
        result = create_games(start_date, end_date, gamedays, fields, time_slots)

        # Assert
        assert isinstance(result, list)
        assert all(isinstance(game, Game) for game in result)



# Generated by CodiumAI

import pytest

class TestAssignWeek:

    #  Tests that the week number is assigned correctly when the start date is before the game day
    def test_assign_week_start_before_game_day(self):
        # Arrange
        start_date = "2022-01-01"
        game = Game("Field A", "10:00", "2022-01-10")

        # Act
        game.assign_week(start_date)

        # Assert
        assert game.week_no == 1

    #  Tests that the week number is assigned correctly when the start date is the same as the game day
    def test_assign_week_start_same_as_game_day(self):
        # Arrange
        start_date = "2022-01-10"
        game = Game("Field A", "10:00", "2022-01-10")

        # Act
        game.assign_week(start_date)

        # Assert
        assert game.week_no == 0

    #  Tests that the week number is assigned correctly when the start date is after the game day
    def test_assign_week_start_after_game_day(self):
        # Arrange
        start_date = "2022-01-20"
        game = Game("Field A", "10:00", "2022-01-10")

        # Act
        game.assign_week(start_date)

        # Assert
        assert game.week_no == -1

    #  Tests that the week number is assigned correctly when the start date is in a leap year
    def test_assign_week_leap_year(self):
        # Arrange
        start_date = "2020-01-01"
        game = Game("Field A", "10:00", "2020-01-10")

        # Act
        game.assign_week(start_date)

        # Assert
        assert game.week_no == 1

    #  Tests that the week number is assigned correctly when the start date is in a non-leap year
    def test_assign_week_non_leap_year(self):
        # Arrange
        start_date = "2021-01-01"
        game = Game("Field A", "10:00", "2021-01-10")

        # Act
        game.assign_week(start_date)

        # Assert
        assert game.week_no == 1
